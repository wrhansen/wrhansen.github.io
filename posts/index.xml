<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on wrhansen.dev blog</title><link>https://blog.wrhansen.dev/posts/</link><description>Recent content in Posts on wrhansen.dev blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Wesley R Hansen</copyright><lastBuildDate>Wed, 28 Dec 2022 20:15:00 -0400</lastBuildDate><atom:link href="https://blog.wrhansen.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TIL: AWS Elastic Beanstalk</title><link>https://blog.wrhansen.dev/posts/2022/aws-journey-elasticbeanstalk/</link><pubDate>Wed, 28 Dec 2022 20:15:00 -0400</pubDate><guid>https://blog.wrhansen.dev/posts/2022/aws-journey-elasticbeanstalk/</guid><description>Background My immediate family (8 of us total) has a private chat group using the GroupMe app 1 that we have been using for a couple of years now. When we first started using GroupMe for our chat, I was happy because it offered an API that you use to enhance the group chat. So I played around with it one weekend and the hansenbot was created.
The hansenbot is a pretty simple django app that exposes a hook URL that you can setup that GroupMe will forward all messages in your group to.</description><content>&lt;h2 id="background">Background&lt;/h2>
&lt;p>My immediate family (8 of us total) has a private chat group using the &lt;em>GroupMe&lt;/em> app &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
that we have been using for a couple of years now. When we first started using &lt;em>GroupMe&lt;/em>
for our chat, I was happy because it offered an &lt;a href="https://dev.groupme.com/">API&lt;/a>
that you use to enhance the group chat. So I played around with it one weekend
and the &lt;a href="https://github.com/wrhansen/hansenbot">hansenbot&lt;/a> was created.&lt;/p>
&lt;p>The &lt;code>hansenbot&lt;/code> is a pretty simple django app that exposes a hook URL that you
can setup that &lt;em>GroupMe&lt;/em> will forward all messages in your group to. I created the
&lt;code>hansenbot&lt;/code> to respond to certain commands that are typed in the group chat that
have the following form: &lt;code>!hb &amp;lt;command&amp;gt;&lt;/code> where &lt;code>!hb&lt;/code> tells the bot that the given
message is a command that it needs to respond to and &lt;code>&amp;lt;command&amp;gt;&lt;/code> is one of the
preconfigured commands that I created that report information back to the
&lt;em>GroupMe&lt;/em> group. These commands I created range from telling &amp;ldquo;dad jokes&amp;rdquo;, giving
current weather information for all the locations where my family lives and
information about the next upcoming birthday.&lt;/p>
&lt;p>Eventually I also added a &amp;ldquo;daily digest&amp;rdquo; feature, implemented as a django management
command, that can be run every morning to give an update on all the things the
family cares about. In our case that&amp;rsquo;s upcoming birthdays, reminders for important
dates and weather forecasts.&lt;/p>
&lt;h2 id="heroku-is-easy-to-setup">Heroku is Easy to Setup&lt;/h2>
&lt;p>It was relatively easy to whip up a simple django app but in order to configure
the &lt;em>GroupMe&lt;/em> callback, I needed to deploy this somehwere publicly. Personally
I don&amp;rsquo;t like spending a lot of time on the logistics of deploying stuff so I opted
to use &lt;em>Heroku&lt;/em> for such a thing. With Heroku, I essentially just had to install
a couple lines of code in the django settings, set up a &lt;code>Procfile&lt;/code>, connect your
github account and repository and away it goes.&lt;/p>
&lt;p>My initial setup was great, and worked really well with &lt;em>Heroku&lt;/em> because everything
was free, including the &amp;ldquo;dyno&amp;rdquo;, postgres database, and redis instance. Everything
a dev needs to create a high functioning site. &lt;em>Heroku&lt;/em> had a pretty decent &amp;ldquo;free&amp;rdquo;
tier to get developers hooked on using their platform and
seeing the benefits first-hand. It wasn&amp;rsquo;t until I wanted to introduce a &amp;ldquo;cron&amp;rdquo;
job that my &lt;em>Heroku&lt;/em> setup required some form of payment. The introduction of a
&amp;ldquo;cron&amp;rdquo; job (in my case, I created a celery beat process) required an additional
dyno, heroku&amp;rsquo;s concept of a container, which seems to be limited to a single
process. So, bumping up the dynos from one to two moved me a $14/month payment
plan. I have to admit, it was quite high in my opinion but overall I decided it
was still worth it because I really do not like messing around with deployments
and this was still super convenient.&lt;/p>
&lt;h2 id="the-problem-heroku-made-some-big-changes">The Problem: Heroku Made Some Big Changes&lt;/h2>
&lt;p>This past year, &lt;em>Heroku&lt;/em> decided to make a pretty significant change to the
pricing on their platform. You can read more about these changes &lt;a href="https://blog.heroku.com/next-chapter">here&lt;/a>.
Essentially these changes were going to do away with the &amp;ldquo;Hobby&amp;rdquo; tier by no
longer offering free versions of database and redis. Once the change came out my
database and redis instance were gone and my simple little bot no longer worked.
I looked into it and it just wasn&amp;rsquo;t worth it anymore to have my tiny little bot
site deployed on Heroku anymore (it would have doubled my monthly payments to
keep it going)!&lt;/p>
&lt;p>So I set out to find a replacement platform where I could deploy my bot site to
at a reasonable price.&lt;/p>
&lt;h2 id="the-switch-to-aws">The Switch to AWS&lt;/h2>
&lt;p>I ultimately decided that I wanted to learn more about AWS, as I am knowledgable
of some services that AWS offers, but wanted to get more of an understanding of
it in general since we use it a lot at work and our use cases are currently growing.
I know AWS is a vast collection of cloud-based tools and services and didn&amp;rsquo;t really
know what the best option for my bot site is. So I asked some of my colleagues
for suggestions on how I should go about deploying this site on AWS. One colleague
suggested I use Elastic Beanstalk and others suggested Lambda. I knew about
serverless lambda as a concept, but I really wanted to try something that was
closer in scope to Heroku&amp;rsquo;s platform to minimize the changes I&amp;rsquo;d need to make to
my bot site.&lt;/p>
&lt;p>So, I decided to create my own private AWS account, and sign up for a year
of &amp;ldquo;Free Tier&amp;rdquo;, which you can do &lt;a href="https://aws.amazon.com/free/">here&lt;/a>.
My experience with setting up the account was fine, it&amp;rsquo;s fairly simple to enter
in all the standard information, and credit card, etc. When I finally get through
the account creation process and landed on the management console homepage&amp;hellip;I was
a bit overwhelmed. You get a sense that you&amp;rsquo;re into something much bigger than
yourself. There&amp;rsquo;s seriously millions of things you can do with this account and
it isn&amp;rsquo;t necessarily immediately clear. To be fair to Amazon, they know this
about AWS (and cloud in general) and provide plenty of links to &amp;ldquo;getting started&amp;rdquo;
articles, documentation and tutorials to get you going on your journey into AWS.&lt;/p>
&lt;img src="https://blog.wrhansen.dev/resources/aws-help-widget.png" alt="AWS Console Widget" class="center" style="border-radius: 8px;" />
&lt;h2 id="elastic-beanstalk-is-confusingat-first">Elastic Beanstalk Is Confusing&amp;hellip;At First&lt;/h2>
&lt;p>So I started my AWS journey by watching a few videos and reading through some
of the basic overview articles that the above help widget provided. It walked
me through some basic definitions of concepts and services that AWS offers.&lt;/p>
&lt;p>I also got acquainted with installing &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI&lt;/a>
and configuring &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">IAM&lt;/a>
to give me a separate user admin user account from the root and also setup
additional security like MFA login for the account.&lt;/p>
&lt;p>Finally the tutorials lead me to try deploying a simple web app on
&lt;a href="https://aws.amazon.com/getting-started/guides/deploy-webapp-elb/">AWS Elastic Beanstalk&lt;/a>.
This tutorial was fairly small and simple to walk through although I must say it
did nothing to help me really understand what Elastic Beanstalk (EB) does. The
tutoral has you write out a bunch of custom javascript that actually create
infrastructure like EC2 instances and S3 buckets. I kinda got the idea, but hoped
that maybe there was a better, more simpler way without having to write all this
custom code (especially in javascript).&lt;/p>
&lt;p>I told myself to stick to the tutorial even though I was a little worried about
the direction it was going, and felt like I wasn&amp;rsquo;t exactly learning about what
EB actually was.&lt;/p>
&lt;h2 id="finding-a-more-suitable-tutorial">Finding A More Suitable Tutorial&lt;/h2>
&lt;p>Eventaully I finished that tutorial, and ended up with the product as desired,
and only had to suffer through a few snags in the tutorial where the tutorial
instructions were not entirely up to date with the latest libraries you installed.
A few minutes of searching around the internet was able to clear up any of these
issues so it was fairly straight forward.&lt;/p>
&lt;p>After finishing this particularly confusing (to me) tutorial, I decided to dig
a little deeper and see if there was a tutorial that more directly suited my
needs now that the particular track I was following through the AWS help widget
had ended. So I did a quick search for &amp;ldquo;django aws eb tutorial&amp;rdquo; and the very first
result was another tutorial on the AWS documentation &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html">here&lt;/a>.
I was surprised because the title was verbatim what I was looking for:
&lt;em>&amp;ldquo;Deploying a Django application to Elastic Beanstalk&amp;rdquo;&lt;/em>. Perfect!&lt;/p>
&lt;h2 id="the-right-tutorial">The Right Tutorial&lt;/h2>
&lt;p>I was able to skip through the first three sections of the tutorial because they
simply involved setting up a python virtualenv, installing django and getting
a basic django project created. Instead, I was just going to tweak my existing
&lt;code>hansenbot&lt;/code> site to work with this thing. I urge you to follow through the tutorial
linked in the previous section, as I won&amp;rsquo;t detail it here. Instead I just want to
highlight the things that I learned and had to do to get my old heroku site ported
over to EB. So here&amp;rsquo;s a fairly quick rundown of what I had to change:&lt;/p>
&lt;ul>
&lt;li>Create a &lt;code>.ebextensions&lt;/code> folder in the root of the project.&lt;/li>
&lt;li>Install &lt;code>awsebcli&lt;/code> tool. (Note: I chose to do this through &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install-osx.html">homebrew&lt;/a>)&lt;/li>
&lt;li>Removed any references to django-heroku library (no longer using it in the project)&lt;/li>
&lt;li>Change database to go off environment variables for RDS connection&lt;/li>
&lt;li>From the aws EB management console, configure a RDS database for the application.
&lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-rds.html#python-rds-create">link&lt;/a>&lt;/li>
&lt;li>Removed any reference to redis (for now) and configured celery tasks to run &amp;ldquo;ALWAYS_EAGER&amp;rdquo;&lt;/li>
&lt;li>Configure an &lt;em>ebextension&lt;/em> config file to run django &lt;code>migrate&lt;/code> and &lt;code>collectstatic&lt;/code>
on container deployment: &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html#python-django-migrate-site">link&lt;/a>&lt;/li>
&lt;li>Configure an &lt;em>ebextension&lt;/em> cron job to run the bot&amp;rsquo;s &amp;ldquo;daily digest&amp;rdquo; command:
&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cron-job-elastic-beanstalk/">link&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="things-i-learned">Things I Learned&lt;/h2>
&lt;ul>
&lt;li>EB works off of commits to your git repository, &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-cli-git.html">by default&lt;/a>&lt;/li>
&lt;li>EB can use ProcFiles like Heroku: &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/python-configuration-procfile.html">link&lt;/a>&lt;/li>
&lt;li>You can use &lt;code>eb shell&lt;/code> to gain shell access to the EC2 instance that is running
your site. &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-ssh.html">link&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="use-github-actions-for-automation">Use Github Actions for Automation&lt;/h2>
&lt;p>Now that I got everything working minimally, I wanted again to move the deployment
from my local shell (using the &lt;code>awsebcli&lt;/code> commands) to some form of automation so
that I can &amp;ldquo;set it and forget it&amp;rdquo;. This was actually relatively easy by configuring
Github Actions on the repository. With a quick google search, I was able to find
someone already had a custom action for building and deploying EB environments.&lt;/p>
&lt;p>This was easy to do, by following the readme for the github action defined
&lt;a href="https://github.com/einaregilsson/beanstalk-deploy">here&lt;/a>. In the end my github
action (&lt;a href="https://github.com/wrhansen/hansenbot/blob/master/.github/workflows/deploy-eb.yaml">here&lt;/a>)
looks like this:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="419827653" type="checkbox" />
&lt;label for="419827653">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">Github Action&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
name: deploy-aws-eb
on:
push:
branches:
- master
jobs:
build:
runs-on: ubuntu-latest
environment: hansenbot
steps:
- name: Checkout Source
uses: actions/checkout@v2
- name: Generate deployment package
run: zip -r app.zip . -x &amp;#39;*.git*&amp;#39;
- name: Deploy to EB
uses: einaregilsson/beanstalk-deploy@v21
with:
aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
application_name: ${{ secrets.APPLICATION_NAME }}
environment_name: ${{ secrets.ENVIRONMENT_NAME }}
existing_bucket_name: ${{ secrets.AWS_BUCKET_NAME }}
version_label: app-${{ github.SHA }}
region: ${{ secrets.AWS_REGION }}
deployment_package: app.zip
wait_for_deployment: true
version_description: ${{ github.SHA }}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>There isn&amp;rsquo;t really too much to say here, other than this workflow has 3 steps:&lt;/p>
&lt;ul>
&lt;li>checkout the latest commit from the master branch&lt;/li>
&lt;li>generate a zip for the latest application &amp;ldquo;build&amp;rdquo;&lt;/li>
&lt;li>deploy the app on EB with all the environment-specific stuff defined in secrets&lt;/li>
&lt;/ul>
&lt;p>With this workflow file installed on my repository, I can now simply merge new
changes to the master branch and that kicks off a job that deploys the new changes
to EB. Excellent!&lt;/p>
&lt;h2 id="improvements-id-like-to-make-eventually">Improvements I&amp;rsquo;d like to make, eventually.&lt;/h2>
&lt;p>As of the writing of this blog post, it is a fully functioning bot with all the
same features as the heroku version, however the deployment is quite perfect and
so I have a few things that I&amp;rsquo;d like to work out. Perhaps these could be separate
blog posts when I actually get around to it.&lt;/p>
&lt;p>&lt;strong>Configure Celery to work with AWS SQS&lt;/strong>. I&amp;rsquo;d like to do this eventually, as
having dedicated background processes to performing bot commands frees up the
web requests and makes the bot chat feel much more responsive. For now, having
everything executed without Celery (or at least ALWAYS_EAGER) is a &amp;ldquo;good enough&amp;rdquo;
solution.&lt;/p>
&lt;p>&lt;strong>Configure a &amp;ldquo;dev&amp;rdquo; EB environment that works off a dev branch&lt;/strong>. I&amp;rsquo;d like to get
to the point where I have a dev branch that I can work off of that deploys to a
separate &amp;ldquo;dev&amp;rdquo; environment of the EB site. This way I can test new features under
development without effecting the production version. This is less of an issue
since the bot is so small in features and is only used by a handful of family
members, but still they can sometimes be annoyed if I flood our chat channel with
lots of spam messages that I might generate while testing new features.&lt;/p>
&lt;h2 id="some-useful-references">Some Useful References&lt;/h2>
&lt;p>&lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-linux-extend.html">EB workflow&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I hate &lt;em>GroupMe&lt;/em>, but that&amp;rsquo;s another story&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Email for Professionals</title><link>https://blog.wrhansen.dev/posts/email-for-professionals/</link><pubDate>Fri, 08 Apr 2022 23:24:16 -0400</pubDate><guid>https://blog.wrhansen.dev/posts/email-for-professionals/</guid><description>Problem In my professional career, from time to time, I get forwarded an email, out of the blue from a colleague, and this email has a message that reads &amp;ldquo;Hey Wes, can you do this for me?&amp;rdquo;. Following this seemingly simple message is a week-long thread of thirty emails between several people and I am the lucky individual who gets added to the chain in hopes that I can resolve the issue.</description><content>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>In my professional career, from time to time, I get forwarded an email, out of
the blue from a colleague, and this email has a message that reads &amp;ldquo;Hey Wes, can
you do this for me?&amp;rdquo;. Following this seemingly simple message is a week-long
thread of thirty emails between several people and I am the lucky individual who
gets added to the chain in hopes that I can resolve the issue.&lt;/p>
&lt;p>This is one of those office etiquette pet peeves of mine that I find frustrating
at times. It is frustrating because the expectation is that I am supposed to
follow the clues in a long chain to even figure out what my colleague is asking
of me. This is an indication to me that my time is not respected, and actually
makes me less willing to help out my fellow colleagues.&lt;/p>
&lt;h2 id="etiquette-be-precise">Etiquette: Be Precise&lt;/h2>
&lt;p>What is the proper etiquette here? How are you as a professional supposed to
communicate to your colleague the important information that is stretched across
a quagmire of hastily constructed emails? It&amp;rsquo;s easy, and it starts with
respecting your colleague&amp;rsquo;s time. Just like yourself, your colleague has an
endless list of things to do so you should respect that time. If you expect them
to give you a timely response and help out with the email you just forwarded,
make sure to be very precise with your message that you write to them. Don&amp;rsquo;t
make them go through all the past emails to try to figure out the context of
what you&amp;rsquo;re asking. Instead, summarize precisely the key points in the chain
and explicitly ask what you&amp;rsquo;re looking for your colleague to do for you. Their
time is as valuable as their&amp;rsquo;s so don&amp;rsquo;t waste it!&lt;/p></content></item><item><title>Docs for Developers</title><link>https://blog.wrhansen.dev/posts/docs-for-developers/</link><pubDate>Sun, 27 Feb 2022 20:28:50 -0500</pubDate><guid>https://blog.wrhansen.dev/posts/docs-for-developers/</guid><description>Book Review This is my review (and notes) of the book Docs for Developers: An Engineer&amp;rsquo;s Field Guide to Technical Writing by Jared Bhatti, Zachary Sarah Corleissen, Jen Lambourne, David Nunez, and Heidi Waterhouse. I purchased this book because I am passionate about good developer docs. I can easily spot good developer docs while working on a project but find it hard to write them myself in a way that is useful to myself and others.</description><content>&lt;h2 id="book-review">Book Review&lt;/h2>
&lt;p>This is my review (and notes) of the book &lt;a href="https://docsfordevelopers.com/" title="Official Book Site">Docs for Developers: An Engineer&amp;rsquo;s
Field Guide to Technical Writing&lt;/a> by Jared Bhatti, Zachary Sarah Corleissen,
Jen Lambourne, David Nunez, and Heidi Waterhouse. I purchased this book because
I am passionate about good developer docs. I can easily spot good developer docs
while working on a project but find it hard to write them myself in a way that
is useful to myself and others. This is a skill that I want to get better at so
I thought that this book would help.&lt;/p>
&lt;h2 id="chapter-1-notes">Chapter 1 Notes&lt;/h2>
&lt;p>This chapter is all about understanding your audience. This chapter seems geared
more towards client-focused documentation, where you have a product (like an API)
that you want clients to read. While this information is useful, and complete,
it seems to be outside the scope of what docs I typically write, which is
supplemental developer docs for internal teams to use to understand some service
that my team maintains. I&amp;rsquo;ll definitely keep the points raised in this chapter
in mind for when I have a need for more client-focused documentation.&lt;/p>
&lt;p>I like the idea of a friction log. The authors define it as:&lt;/p>
&lt;blockquote>
&lt;p>A &lt;em>friction log&lt;/em> is a journal in which you try your software as a user would
and record your experiences. To record your experience, log each step
sequentially, noting the behavior you expect and the actual behavior of your
software.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve never done anything explicity like this, however I can relate to the
process. To put it into my own experiences, my team typically writes docs for
the rest of the team to consume, as I mentioned before. We have an agreement on
the team, that if any dev reads docs and they don&amp;rsquo;t quite make sense to the dev
reading them it is their responsibility to update the docs to make more sense.
This to me has some relevance to a &lt;em>friction log&lt;/em> because you have a real-world
scenario where your intended audience is reading/working through your
documentation and they just happen to also have the ability to improve it
directly.&lt;/p>
&lt;h2 id="overall-review">Overall Review&lt;/h2>
&lt;p>After chapter 1 I found 90% of the book pretty standard information and got
nothing out of the information that I really thought was worthwhile. For this
reason I stopped taking individual chapter notes. There was one section in
one of the final chapters that explained some of the most common ways to
organize your docs site. It gave me some ideas of how to organize the docs that
I write for work in a way that makes the information grouped in a way that&amp;rsquo;s easy
to find stuff.&lt;/p>
&lt;p>I give this book 2 stars.&lt;/p></content></item><item><title>How is This Blog Made?</title><link>https://blog.wrhansen.dev/posts/how-is-this-blog-made/</link><pubDate>Mon, 21 Feb 2022 11:57:49 -0500</pubDate><guid>https://blog.wrhansen.dev/posts/how-is-this-blog-made/</guid><description>Technology This blog is written in markdown and uses the Hugo static site generator. I found a nice minimalist theme called terminal that styles the site the way you see here.
Deployment For simplicity and ease-of-use, I decided to host this blog on github pages and take advantage of free static site hosting. You can find the contents of this blog in the following repo: link. It&amp;rsquo;s easy to use because github automatically builds and deploys anytime you merge a new commit to the main branch.</description><content>&lt;h2 id="technology">Technology&lt;/h2>
&lt;p>This blog is written in markdown and uses the &lt;a href="https://gohugo.io/">Hugo&lt;/a> static
site generator. I found a nice minimalist theme called &lt;a href="">terminal&lt;/a> that styles
the site the way you see here.&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>For simplicity and ease-of-use, I decided to host this blog on github pages and
take advantage of free static site hosting. You can find the contents of this
blog in the following repo: &lt;a href="https://github.com/wrhansen/wrhansen.github.io">link&lt;/a>.
It&amp;rsquo;s easy to use because github automatically builds and deploys anytime you
merge a new commit to the &lt;code>main&lt;/code> branch.&lt;/p>
&lt;p>Additionally, they allow the option to use your own custom domain for the URL
so I opted with my own domain: &lt;a href="https://blog.wrhansen.dev/">https://blog.wrhansen.dev/&lt;/a>.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Host Hugo on Github: &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">link&lt;/a>.&lt;/li>
&lt;li>Hugo terminal theme: &lt;a href="https://github.com/panr/hugo-theme-terminal">link&lt;/a>&lt;/li>
&lt;li>Github Pages: &lt;a href="https://pages.github.com/">link&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>